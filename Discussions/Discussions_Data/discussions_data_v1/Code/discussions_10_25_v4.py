# -*- coding: utf-8 -*-
"""Discussions_10_25_v4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qkz2YJF3U_6NJ52zK5Wua5nRIJ2ET_td

The below code creates csv file having the below columns.


1.   Title - In Discussions, Evetry thread will have one title name.
2.   Title ID - Every title should have unique ID, so that it would be easier to track
3.   Created At - This fields give info about when a specific Title ID was created
4.   User ID - This would be the creator of the title/discussion thread
5.   Answered/Unanswered - If no comments in a thread, then unanswered.
6.   Comment ID - Each comment texts present in the body of a discussion thread will get unique ID. If 0 comments, Then This field value would be NaN. If there are subthreads it will say combined_text
7.   Comment Author - This would the user ID of the author who gives the comment
8.   Comment Text - This would be the comment text of a specific discussion thread
"""

import requests
import csv

# Replace with your GitHub personal access token
access_token = "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"

# GitHub API endpoint
base_url = "https://api.github.com/graphql"

# Repository details
owner = "autowarefoundation"
repo_name = "autoware"

# Define the GraphQL query to retrieve discussions with pagination
graphql_query = """
{
  repository(owner: "%s", name: "%s") {
    discussions(first: 100, orderBy: {field: CREATED_AT, direction: ASC}, after: null) {
      edges {
        node {
          id
          title
          createdAt
          author {
            login
          }
          comments(first: 10) {
            totalCount
            edges {
              node {
                id
                author {
                  login
                }
                body
                replies(first: 10) {
                  edges {
                    node {
                      id
                      author {
                        login
                      }
                      body
                    }
                  }
                }
              }
            }
          }
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
""" % (owner, repo_name)

# Define headers with authorization
headers = {
    "Authorization": f"Bearer {access_token}"
}

# Initialize a list for collecting discussion data
discussion_data = []

# Use pagination to retrieve all discussion data
while True:
    response = requests.post(base_url, json={"query": graphql_query}, headers=headers)

    if response.status_code == 200:
        data = response.json()
        repository = data["data"]["repository"]
        discussions = repository["discussions"]
        edges = discussions["edges"]
        for edge in edges:
            discussion = edge["node"]
            discussion_id = discussion["id"]
            title = discussion["title"]
            created_at = discussion["createdAt"]
            author = discussion["author"]["login"] if discussion["author"] else "Unknown"
            num_comments = discussion["comments"]["totalCount"]
            answered_unanswered = "Answered" if num_comments > 0 else "Unanswered"

            # Append data for discussions
            discussion_data.append([
                title,
                discussion_id,
                created_at,
                author,
                num_comments,
                answered_unanswered,
                None,
                None,
                None
            ])

            if num_comments > 0:
                for comment in discussion["comments"]["edges"]:
                    comment_node = comment["node"]
                    comment_id = comment_node["id"]
                    comment_author = comment_node["author"]["login"] if comment_node.get("author") else "Unknown"
                    comment_text = comment_node["body"]

                    # Append data for comments
                    discussion_data.append([
                        title,
                        discussion_id,
                        created_at,
                        author,
                        num_comments,
                        answered_unanswered,
                        comment_id,
                        comment_author,
                        comment_text
                    ])

                    if "replies" in comment_node:
                        for reply in comment_node["replies"]["edges"]:
                            reply_node = reply["node"]
                            reply_id = reply_node["id"]
                            reply_author = reply_node["author"]["login"] if reply_node.get("author") else "Unknown"
                            reply_text = reply_node["body"]

                            # Append data for replies (sub-comments)
                            discussion_data.append([
                                title,
                                discussion_id,
                                created_at,
                                author,
                                num_comments,
                                answered_unanswered,
                                reply_id,
                                reply_author,
                                reply_text
                            ])

        page_info = discussions["pageInfo"]
        if page_info["hasNextPage"]:
            graphql_query = """
            {
              repository(owner: "%s", name: "%s") {
                discussions(first: 100, orderBy: {field: CREATED_AT, direction: ASC}, after: "%s") {
                  edges {
                    node {
                      id
                      title
                      createdAt
                      author {
                        login
                      }
                      comments(first: 10) {
                        totalCount
                        edges {
                          node {
                            id
                            author {
                              login
                            }
                            body
                            replies(first: 10) {
                              edges {
                                node {
                                  id
                                  author {
                                    login
                                  }
                                  body
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                }
              }
            }
            """ % (owner, repo_name, page_info["endCursor"])
        else:
            break
    else:
        print("Failed to retrieve discussions. Status code:", response.status_code)
        print(response.text)
        break

# Save the discussion data to a CSV file
with open('github_discussion_data.csv', 'w', newline='', encoding='utf-8') as csvfile:
    csv_writer = csv.writer(csvfile)
    csv_writer.writerow(["Title", "Discussion ID", "Created At", "User ID", "Comment Count", "Answered/Unanswered", "Comment ID", "Comment Author", "Comment Text"])
    csv_writer.writerows(discussion_data)

import pandas as pd

discussion_df = pd.read_csv('github_discussion_data.csv')

discussion_df.info()

