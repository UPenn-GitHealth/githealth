# -*- coding: utf-8 -*-
"""discussions_user_details_11_28_2023_start

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KW3AQSvaIH5ICSOa7SxChTPVuttbdXcZ
"""

import pandas as pd
import requests

# Replace 'your_file_path' with the actual path to your CSV file
csv_file_path = 'final_github_discussion_data.csv'

# Read the CSV file into a DataFrame
discussion_df = pd.read_csv(csv_file_path)

# GitHub GraphQL API endpoint
graphql_url = "https://api.github.com/graphql"

# Replace 'YOUR_PERSONAL_ACCESS_TOKEN' with your GitHub personal access token
access_token = "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"

headers = {
    "Authorization": f"Bearer {access_token}"
}

# Function to fetch user details from GitHub GraphQL API
def fetch_user_details(username):
    query = """
    query {
        user(login: "%s") {
            login
            email
            location
            url
            company
            followers {
                totalCount
            }
            following {
                totalCount
            }
        }
    }
    """ % username

    response = requests.post(graphql_url, json={"query": query}, headers=headers)

    if response.status_code == 200:
        user_data = response.json().get("data", {}).get("user", {})
        return user_data
    else:
        return None

# Create a list to store user details
user_details_list = []

# Get all unique authors from the discussion DataFrame
all_authors = discussion_df['discussion_comment_author'].unique()

# Iterate over all authors
for author in all_authors:
    user_data = fetch_user_details(author)

    user_details_list.append({
        'discussion_comment_author': author,
        'company': None if user_data is None else user_data.get('company'),
        'email': None if user_data is None else user_data.get('email'),
        'location': None if user_data is None else user_data.get('location'),
        'social_media_link': None if user_data is None else user_data.get('url'),
        'followers': None if user_data is None else user_data.get('followers', {}).get('totalCount'),
        'followings': None if user_data is None else user_data.get('following', {}).get('totalCount')
    })

# Create a new DataFrame from the list
user_details_df = pd.concat([pd.DataFrame([user_details]) for user_details in user_details_list], ignore_index=True)

# Save the user details DataFrame to a new CSV file
user_details_csv_file = 'user_details_extended.csv'
user_details_df.to_csv(user_details_csv_file, index=False)

print(f"User details saved to {user_details_csv_file}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Replace 'your_file_path' with the actual path to your CSV file
csv_file_path = 'user_details_extended.csv'

# Read the CSV file into a DataFrame
user_details_df = pd.read_csv(csv_file_path)

# 1. General Overview
print("1. General Overview:")
print(user_details_df.head())
print(user_details_df.info())

# 2. Statistical Summary
print("\n2. Statistical Summary:")
print(user_details_df.describe())

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Replace 'your_file_path' with the actual path to your CSV file
csv_file_path = 'user_details_extended.csv'

# Read the CSV file into a DataFrame
user_details_df = pd.read_csv(csv_file_path)

# 1. Number of Unique Values in Each Column
print("1. Number of Unique Values in Each Column:")
for column in user_details_df.columns:
    unique_values_count = user_details_df[column].nunique()
    print(f"{column}: {unique_values_count} unique values")

# 2. Count of Users with Company Information
users_with_company_info = user_details_df['company'].notnull().sum()
print(f"\n2. Count of Users with Company Information: {users_with_company_info} users")

# 3. Categorizing Users Based on Company Names
# You can adjust the threshold based on your data to categorize users with the most common companies
company_threshold = 5  # Example: consider companies with at least 5 occurrences
top_companies = user_details_df['company'].value_counts().head(company_threshold).index

user_details_df['company_category'] = user_details_df['company'].apply(
    lambda x: x if pd.notnull(x) and x in top_companies else 'Other'
)

# Display the count of users in each company category
print("\n3. Categorizing Users Based on Company Names:")
print(user_details_df['company_category'].value_counts())

# Plot the distribution of users in each company category
plt.figure(figsize=(10, 6))
sns.countplot(x='company_category', data=user_details_df)
plt.title('Distribution of Users Based on Company Categories')
plt.show()

