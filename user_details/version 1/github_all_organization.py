# -*- coding: utf-8 -*-
"""github_all_organization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JvNXhO1lpUw88x3FLhmwojb_ds3TkNkH
"""

import requests
import pandas as pd

# Function to fetch GitHub user details by username
def get_github_user_details(username):
    url = f'https://api.github.com/users/{username}'
    response = requests.get(url)
    if response.status_code == 200:
        user_data = response.json()
        return user_data.get('name', '')
    else:
        return ''

# Load Excel file into a DataFrame
excel_file = pd.ExcelFile('autoware contributors.xlsx')
autoware_contributors_df = excel_file.parse(excel_file.sheet_names[0])

# Load CSV files into DataFrames
discussion_contributors_df = pd.read_csv('discussion_contributers.csv')
issues_contributors_df = pd.read_csv('issues_contributers.csv')
pr_contributors_df = pd.read_csv('pr_contributers.csv')

# Rename columns in the discussion_contributors_df DataFrame
discussion_contributors_df = discussion_contributors_df.rename(columns={'discussion_comment_author': 'user_id'})

# Rename columns in the issues_contributors_df DataFrame
issues_contributors_df = issues_contributors_df.rename(columns={'issues_comment_author': 'user_id'})

# Rename columns in the pr_contributors_df DataFrame
pr_contributors_df = pr_contributors_df.rename(columns={'pull_request_user_id': 'user_id'})

# Fetch and update names for discussion_contributors_df
discussion_contributors_df['name'] = discussion_contributors_df['user_id'].apply(get_github_user_details)

# Fetch and update names for issues_contributors_df
issues_contributors_df['name'] = issues_contributors_df['user_id'].apply(get_github_user_details)

# Fetch and update names for pr_contributors_df
pr_contributors_df['name'] = pr_contributors_df['user_id'].apply(get_github_user_details)

# Add 'name' column to current CSV files
discussion_contributors_df.to_csv('discussion_contributers.csv', index=False)
issues_contributors_df.to_csv('issues_contributers.csv', index=False)
pr_contributors_df.to_csv('pr_contributers.csv', index=False)

# Display basic information about each DataFrame
print("Autoware Contributors DataFrame info:")
print(autoware_contributors_df.info())

print("\nDiscussion Contributors DataFrame info:")
print(discussion_contributors_df.info())

print("\nIssues Contributors DataFrame info:")
print(issues_contributors_df.info())

print("\nPR Contributors DataFrame info:")
print(pr_contributors_df.info())

# Concatenate DataFrames vertically
concatenated_df = pd.concat([discussion_contributors_df, issues_contributors_df, pr_contributors_df], ignore_index=True)

# Deduplicate based on 'pull_request_user_id'
deduplicated_df = concatenated_df.drop_duplicates(subset='user_id', keep='first')

# Save the deduplicated DataFrame to a new CSV file
deduplicated_df.to_csv('user_details_all.csv', index=False)

# Display basic information about the deduplicated DataFrame
print("Deduplicated DataFrame info:")
print(deduplicated_df.info())

